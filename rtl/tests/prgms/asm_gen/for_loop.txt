// for loop structure
// see if branch predictor learns pattern
// (written inefficiently on purpose)

// init
addi, x10,  x0, 3 // x10 = 3 (num times to run for loop)
addi, x1,  x0, 2 // x1 = 2
sw,   x0,  x1, 0 // DMEM[0] = 2
addi, x1,  x0, 3 // x1 = 3
sw,   x0,  x1, 1 // DMEM[1] = 3
addi, x5,  x0, 5 // x5 = 5 (number of times in for loop)
addi, x7,  x0, 0 // x7 = 0 (num for loops)
addi, x9,  x0, 0 // x9 = 0 (num iterations)
addi, x1,  x0, 0 // x1 = 0 (initialize counter)

// LOOP:
addi, x9,  x9, 1 // incr x9
lw,   x2,  x0, 0 // x2 = DMEM[0]
addi, x2,  x2, 1
sw,   x0,  x2, 0 // incr DMEM[0]
lw,   x3,  x0, 1 // x3 = DMEM[1]
addi, x3,  x3, 1
sw,   x0,  x3, 1 // incr DMEM[1]
addi, x1,  x1, 1 // incr counter
blt,  x1,  x5, -8 // loop back if condition not met
lw,   x12, x0, 1 // store x3 (DMEM[1]) in x12 at end of loop
blt,  x5,  x1, -10 // should never be taken
addi, x7,  x7, 1 // incr for loop count
blt, x7, x10, -13
